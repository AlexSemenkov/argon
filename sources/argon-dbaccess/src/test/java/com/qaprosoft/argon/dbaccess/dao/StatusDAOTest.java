package com.qaprosoft.argon.dbaccess.dao;

import static org.testng.Assert.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import com.qaprosoft.argon.dbaccess.dao.mysql.StatusDAO;
import com.qaprosoft.argon.models.db.Status;
import com.qaprosoft.argon.models.db.Status.StatusType;

/**
 * @author asemenkov
 * @since 07 Dec 2017
 */
@Test
@ContextConfiguration("classpath:com/qaprosoft/argon/dbaccess/dbaccess-test.xml")
public class StatusDAOTest extends AbstractTestNGSpringContextTests
{

	private static final boolean ENABLED = true;

	private static final Status STATUS = new Status();
	{
		STATUS.setStatusType(StatusType.TEST_ONLINE);
	}

	@Autowired
	private StatusDAO statusDAO;

	@Test(enabled = ENABLED)
	public void createStatus()
	{
		statusDAO.createStatus(STATUS);
		assertNotEquals(STATUS.getId(), 0, "Status ID must be set up by autogenerated keys.");
	}

	@Test(enabled = ENABLED, dependsOnMethods = "createStatus", expectedExceptions = DuplicateKeyException.class)
	public void createStatusFail()
	{
		statusDAO.createStatus(STATUS);
	}

	@Test(enabled = ENABLED, dependsOnMethods = "createStatus")
	public void getAllStatuses()
	{
		assertFalse(statusDAO.getAllStatuses().isEmpty(), "List of all statuses is empty.");
	}

	@Test(enabled = ENABLED, dependsOnMethods = "createStatus")
	public void getStatusById()
	{
		checkStatus(statusDAO.getStatusById(STATUS.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = "createStatus")
	public void getStatusListByStatusType()
	{
		checkStatus(statusDAO.getStatusByStatusType(STATUS.getStatusType()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = "createStatus")
	public void updateStatus()
	{
		STATUS.setStatusType(StatusType.TEST_OFLINE);
		statusDAO.updateStatus(STATUS);
		checkStatus(statusDAO.getStatusById(STATUS.getId()));
	}

	// Toggle to delete by ID/STATUS
	private static final boolean DELETE_USER_BY_ID = true;

	@Test(enabled = ENABLED && DELETE_USER_BY_ID, dependsOnMethods =
	{ "createStatus", "createStatusFail", "getStatusById",
			"getStatusListByStatusType", "getAllStatuses", "updateStatus" })
	public void deleteStatusById()
	{
		statusDAO.deleteStatusById(STATUS.getId());
		assertNull(statusDAO.getStatusById(STATUS.getId()));
	}

	@Test(enabled = ENABLED && !DELETE_USER_BY_ID, dependsOnMethods =
	{ "createStatus", "createStatusFail", "getStatusById",
			"getStatusListByStatusType", "getAllStatuses", "updateStatus" })
	public void deleteStatusByStatusType()
	{
		statusDAO.deleteStatusByStatusType(STATUS.getStatusType());
		assertNull(statusDAO.getStatusByStatusType(STATUS.getStatusType()));
	}

	private void checkStatus(Status status)
	{
		assertEquals(status.getStatusType(), STATUS.getStatusType(), "Status is not as expected.");
	}
}
