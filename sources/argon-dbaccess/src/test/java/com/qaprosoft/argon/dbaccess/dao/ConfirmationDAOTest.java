package com.qaprosoft.argon.dbaccess.dao;

import com.qaprosoft.argon.dbaccess.dao.mysql.ConfirmationDAO;
import com.qaprosoft.argon.dbaccess.dao.mysql.StatusDAO;
import com.qaprosoft.argon.dbaccess.dao.mysql.UserDAO;
import com.qaprosoft.argon.dbaccess.utils.KeyGenerator;
import com.qaprosoft.argon.models.db.*;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import java.util.Date;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

/**
 * @author kbugrim
 * @since 10 Dec 2017
 */
@Test
@ContextConfiguration("classpath:com/qaprosoft/argon/dbaccess/dbaccess-test.xml")
public class ConfirmationDAOTest extends AbstractTestNGSpringContextTests {

    private static final boolean ENABLED = false;

    @Autowired
    private ConfirmationDAO confirmationDAO;

    @Autowired
    private UserDAO userDAO;

    @Autowired
    private StatusDAO statusDAO;

    private static final User USER = new User();
    {
        USER.setEnabled(true);
        USER.setStatus(STATUS);
        USER.setEmail(KeyGenerator.getKey() + "@test-mail.com");
        USER.setDob(new Date());
        USER.setFirstName("Boris");
        USER.setLastName("The Blade");
        USER.setPassword("pass" + KeyGenerator.getKey().toString());
        USER.setDob(DateTime.now().withTime(0, 0, 0, 0).minusYears(18).toDate());
        USER.setUsername("user" + KeyGenerator.getKey());
        USER.setVerified(true);
    }

    private static final Status STATUS = new Status();
    {
        STATUS.setStatusType(Status.StatusType.TEST_ONLINE);
    }

    private static final Confirmation CONFIRMATION = new Confirmation();
    {
        CONFIRMATION.setLink("http://www." + KeyGenerator.getKey() + ".com");
        CONFIRMATION.setAttempts(2);
        CONFIRMATION.setUser(USER);
    }

    @BeforeClass
    public void init(){
        statusDAO.createStatus(STATUS);
        userDAO.createUser(USER);
    }

    @AfterClass
    public void delete(){
        userDAO.deleteUserById(USER.getId());
        statusDAO.deleteStatusById(STATUS.getId());
    }

    @Test(enabled = ENABLED)
    public void createConfirmation()
    {
        confirmationDAO.createConfirmation(CONFIRMATION);
        assertNotEquals(CONFIRMATION.getId(), 0, "Confirmation ID must be set up by autogenerated keys.");
    }

    // Toggle to delete by ID/CONFIRMATION
    private static final boolean DELETE_CONFIRMATION_BY_ID = true;

    @Test(enabled = ENABLED && DELETE_CONFIRMATION_BY_ID, dependsOnMethods =
//            { "createChat", "createChatFail", "getChatById",
//                    "getChatByName", "updateChat","addUser", "deleteUser"}
            {"createConfirmation"}   )
    public void deleteConfirmationById()
    {
        confirmationDAO.deleteConfirmationById(CONFIRMATION.getId());
        assertNull(confirmationDAO.getConfirmationById(CONFIRMATION.getId()));
    }

    @Test(enabled = ENABLED && !DELETE_CONFIRMATION_BY_ID, dependsOnMethods =
//            { "createChat", "createChatFail", "getChatById",
//                    "getChatByName", "updateChat" }
            {"createConfirmation"})
    public void deleteStatusByName()
    {
        confirmationDAO.deleteConfirmationByLink(CONFIRMATION.getLink());
        assertNull(confirmationDAO.getConfirmationByLink(CONFIRMATION.getLink()));
    }

    private void checkConfirmation(Confirmation confirmation)
    {
        assertEquals(confirmation.getAttempts(), CONFIRMATION.getAttempts(), "Confirmation attempts is not as expected.");
        assertEquals(confirmation.getLink(), CONFIRMATION.getLink(), "Confirmation link is not as expected.");
    }
}
